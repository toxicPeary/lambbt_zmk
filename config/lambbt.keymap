/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&mmv {
    time-to-max-speed-ms = <680>;
    acceleration-exponent = <2>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        swap: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            timeout-ms = <1000>;
        };
    };

    combos {
        compatible = "zmk,combos";

        G4 {
            bindings = <&kp DE_N4>;
            key-positions = <12 24>;
            layers = <5>;
        };

        G5 {
            bindings = <&kp DE_N5>;
            key-positions = <12 0>;
            layers = <5>;
        };

        G6 {
            bindings = <&kp DE_N6>;
            key-positions = <0 24>;
            layers = <5>;
        };

        Gthing {
            bindings = <&kp DE_CARET>;
            key-positions = <0 24 12>;
            layers = <5>;
        };

        toCanary {
            bindings = <&to 6>;
            key-positions = <19 20 21>;
            layers = <0>;
        };

        toBase {
            bindings = <&to 0>;
            key-positions = <19 20 21>;
            layers = <6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        zero_layer {
            bindings = <
&kp TAB    &kp Q              &kp W  &kp F             &kp P      &kp B        &kp J    &kp L  &td DE_U_UMLAUT U     &kp DE_Y             &td DE_PIPE DE_FSLH   &td DELETE BACKSPACE
&kp LCTRL  &td DE_A_UMLAUT A  &kp R  &td DE_SZ S       &kp T      &kp G        &kp M    &kp N  &kp E                 &kp I                &td DE_O_UMLAUT O     &td DE_DOUBLE_QUOTES DE_SQT
&sk LSHFT  &kp DE_Z           &kp X  &kp C             &kp D      &kp V        &kp K    &kp H  &td DE_SEMI DE_COMMA  &td DE_COLON DE_DOT  &td DE_AMPS DE_MINUS  &kp ESC
                                     &sk LEFT_CONTROL  &kp SPACE  &sk LSHFT    &kp RET  &to 1  &td DE_EXCL DE_QMARK
            >;
        };

        first_layer {
            bindings = <
 &kp ESC       &kp DE_AT     &kp DE_HASH   &kp DE_DLLR   &kp DE_PRCNT    &kp DE_CARET  &kp DE_AMPS  &kp DE_STAR  &kp DE_SEMI  &none  &td DELETE BACKSPACE
 &kp TAB       &kp DE_EQUAL  &kp DE_ACUTE  &kp DE_GRAVE  &kp DE_SQT      &kp DE_BSLH   &kp DE_LBRC  &kp DE_RBRC  &kp DE_PIPE  &none  &kp ENTER
 &kp DE_TILDE  &none         &none         &none         &kp DE_DQT      &kp DE_LBKT   &kp DE_LPAR  &kp DE_RPAR  &kp DE_RBKT  &to 4  &to 2
                                   &none         &to 0         &sk LSHIFT      &kp RET       &to 3        &none
            >;
        };

        second_layer {
            bindings = <
 &swap                &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &none                   &none    &kp LA(LEFT)  &kp LC(LS(TAB))  &kp RC(TAB)     &kp LA(RIGHT)  &td DEL BACKSPACE
 &kp F1               &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp DEL                 &none    &kp LEFT      &kp DOWN         &kp UP          &kp RIGHT      &kp ENTER
 &td LG(GRAVE) GRAVE  &kp PG_DN       &kp LC(DE_C)    &kp LC(DE_V)     &none                   &none    &mkp LCLK     &mkp RCLK        &msc SCRL_DOWN  &msc SCRL_UP   &none
                                            &none           &to 0            &kp LS(LEFT_CONTROL)    &kp RET  &to 1         &none
            >;
        };

        third_layer {
            bindings = <
 &kp ESC  &kp C_PP     &kp C_PREV    &kp C_NEXT    &kp DE_UNDERSCORE    &kp DE_MINUS  &kp N7  &kp N8  &kp N9  &none  &td DEL BSPC
 &kp TAB  &none        &kp C_VOL_DN  &kp C_VOL_UP  &kp DE_PLUS          &kp DE_EQUAL  &kp N4  &kp N5  &kp N6  &none  &kp ENTER
 &none    &kp DE_STAR  &kp C_BRI_DN  &kp C_BRI_UP  &kp DOT              &kp N0        &kp N1  &kp N2  &kp N3  &to 5  &to 2
                             &none         &to 0         &sk LGUI             &kp RET       &to 1   &none
            >;
        };

        fourth_layer {
            bindings = <
 &none  &none  &none  &none  &none    &none  &none       &none       &none  &none       
 &none  &none  &none  &none  &none    &none  &bt BT_PRV  &bt BT_NXT  &none  &bt BT_CLR 
 &none  &none  &none  &none  &none    &none  &none       &none       &none  &none      
                     &none  &to 0  &none    &none  &to 1       &none
            >;
        };

        fifth_layer {
            bindings = <
&kp DE_N3  &kp ESC    &kp Q     &kp W     &kp E  &kp R        &kp T    &kp DE_Z  &kp U  &kp I  &kp O  &kp P
&kp DE_N2  &kp LSHFT  &kp A     &kp S     &kp D  &kp F        &kp G    &kp H     &kp J  &kp K  &kp L  &kp TAB
&kp DE_N1  &kp LCTRL  &kp DE_Y  &kp X     &kp C  &kp V        &kp B    &kp N     &kp M  &none  &none  &to 0
                                &kp LALT  &kp C  &kp SPACE    &kp RET  &swap     &none
            >;
        };

    };
};
